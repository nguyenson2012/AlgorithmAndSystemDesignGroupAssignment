// Time complexity: O(n)
// Space complexity: O(n) 
// Explanation: Using hash map to count frequency of each element

class Solution {
    public int[] topKFrequent(int[] nums, int k) {
        Map<Integer, Integer> map  = new HashMap<>();
        for(int num : nums){
            map.put(num, map.getOrDefault(num, 0) + 1);
        }

        // Using freq array to store the value of element that has the same freq
        List<Integer>[] freq = new ArrayList[nums.length + 1];
        for (int i = 0; i < freq.length; i++) {
            freq[i] = new ArrayList<>();
        }

        // Iterate through hashmap to add list to freq array
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            int frequency = entry.getValue();
            freq[frequency].add(entry.getKey());
        }

        int[] res = new int[k];
        int idx = 0;
        for (int i = freq.length - 1; i >= 0; i--) {
            for (int num : freq[i]) {
                res[idx++] = num;
                if (idx == k) {
                    return res;
                }
            }
        }

        return new int[0];
    }
}