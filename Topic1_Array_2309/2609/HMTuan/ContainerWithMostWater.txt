// Time complexity: O(n)
// Space complexity: O(1) 
// Explanation: Using 2 pointer left and right.
//		Greedy: Fix the pointer (left or right) with highest high, and move the another one 

class Solution {
    public int maxArea(int[] height) {
        int left = 0; 
        int right = height.length - 1;

        int maxWater = 0;
        while(left < right){
            int dis = right - left;
            int currWater = Math.min(height[left], height[right]) * dis;
            maxWater = Math.max(maxWater, currWater);
            if(height[left] > height[right]){
                --right;
            }else{
                ++left;
            }
        }
        return maxWater;
    }
}