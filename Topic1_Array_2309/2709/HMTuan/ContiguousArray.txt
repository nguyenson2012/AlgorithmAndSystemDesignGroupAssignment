// Time complexity: O(n)
// Space complexity: O(n) 
// Explanation: Using hash map to store different between number of zeros and ones at the current index		

class Solution {
    public int findMaxLength(int[] nums) {
        // Hashmap to store <difference between 0s and 1s, index>
        HashMap<Integer, Integer> hm = new HashMap<>();

        int zeroNum = 0, oneNum = 0, maxLen = 0;
        hm.put(0, -1); // base case
        for(int i = 0; i < nums.length; i++){
            if(nums[i] == 0)
                ++zeroNum;
            else 
                ++oneNum;

            int diff = oneNum - zeroNum;
            if(hm.containsKey(diff)){
		// If the current difference has been encountered before
		// calculate the length of the subarray
                int currLen = i - hm.get(diff);
                maxLen = Math.max(maxLen, currLen);
            }else{
                hm.put(diff, i);
            }
        }
        return maxLen;
    }
}