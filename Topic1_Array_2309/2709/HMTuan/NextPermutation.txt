// Time complexity: O(n)
// Space complexity: O(1) 
// Explanation: Find the first decreasing element from the end. 
//		If, none -> last permutation -> reverse all array
//		Otherwise, swap it with the next larger element and reverse the suffix

class Solution {
public:
    void nextPermutation(vector<int>& nums) {
        if(nums.size() <= 1) return;

        int i = nums.size() - 2;
        while(i >= 0 && nums[i] >= nums[i+1]){
            --i;
        }
        if(i == -1){
	    // last case: the last permutation
            return reverse(nums.begin(), nums.end());
        }
        else{
            int j = nums.size() - 1;
            while(nums[i] >= nums[j]) --j;
            swap(nums[i], nums[j]);
            reverse(nums.begin() + i + 1, nums.end());
        }
    }
};